{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.linear_model as lm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Master Record Number      int64\n",
       "Year                      int64\n",
       "Month                     int64\n",
       "Day                       int64\n",
       "DayType                  object\n",
       "Hour                    float64\n",
       "Collision Type           object\n",
       "Injury Type              object\n",
       "Primary Factor           object\n",
       "Reported_Location        object\n",
       "Latitude                float64\n",
       "Longitude               float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#loading the Data\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('CrashData.csv' , engine='python')\n",
    "\n",
    "df.describe() #will returns the quick stats such as count, mean, std (standard\n",
    "#deviation) min, first quartile, median, third quartile, max on each column\n",
    "#of the dataframe\n",
    "\n",
    "df.cov()  #Covariance indicates how two variables are related. A positive\n",
    "#covariance means the variables are positively related, while a negative\n",
    "#covariance means the variables are inversely related. Drawback of covariance\n",
    "#is that it does not tell you the degree of positive or negative relation\n",
    "\n",
    "df.corr() #Correlation is another way to determine how two variables are\n",
    "#related. In addition to telling you whether variables are positively or\n",
    "#inversely related, correlation also tells you the degree to which the\n",
    "#variables tend to move together. When you say that two items correlate, you\n",
    "#are saying that the change in one item effects a change in another item. You\n",
    "#ill always talk about correlation as a range between -1 and 1\n",
    "\n",
    "df.dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Master Record Number</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>DayType</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Collision Type</th>\n",
       "      <th>Injury Type</th>\n",
       "      <th>Primary Factor</th>\n",
       "      <th>Reported_Location</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>902363382</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>Weekday</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>No injury/unknown</td>\n",
       "      <td>OTHER (DRIVER) - EXPLAIN IN NARRATIVE</td>\n",
       "      <td>1ST &amp; FESS</td>\n",
       "      <td>39.159207</td>\n",
       "      <td>-86.525874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>902364268</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>Weekday</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>No injury/unknown</td>\n",
       "      <td>FOLLOWING TOO CLOSELY</td>\n",
       "      <td>2ND &amp; COLLEGE</td>\n",
       "      <td>39.161440</td>\n",
       "      <td>-86.534848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>902364412</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>2300.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>Non-incapacitating</td>\n",
       "      <td>DISREGARD SIGNAL/REG SIGN</td>\n",
       "      <td>BASSWOOD &amp; BLOOMFIELD</td>\n",
       "      <td>39.149780</td>\n",
       "      <td>-86.568890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>902364551</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>900.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>Non-incapacitating</td>\n",
       "      <td>FAILURE TO YIELD RIGHT OF WAY</td>\n",
       "      <td>GATES &amp; JACOBS</td>\n",
       "      <td>39.165655</td>\n",
       "      <td>-86.575956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>902364615</td>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>No injury/unknown</td>\n",
       "      <td>FAILURE TO YIELD RIGHT OF WAY</td>\n",
       "      <td>W 3RD</td>\n",
       "      <td>39.164848</td>\n",
       "      <td>-86.579625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53938</th>\n",
       "      <td>900084526</td>\n",
       "      <td>2003</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>Weekday</td>\n",
       "      <td>1700.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>No injury/unknown</td>\n",
       "      <td>IMPROPER LANE USAGE</td>\n",
       "      <td>DUNN &amp; WHITE LOT WEST</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53939</th>\n",
       "      <td>900089213</td>\n",
       "      <td>2003</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>Weekday</td>\n",
       "      <td>800.0</td>\n",
       "      <td>1-Car</td>\n",
       "      <td>No injury/unknown</td>\n",
       "      <td>UNSAFE SPEED</td>\n",
       "      <td>RED OAK &amp; SR446</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53940</th>\n",
       "      <td>900095322</td>\n",
       "      <td>2003</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>Weekday</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>No injury/unknown</td>\n",
       "      <td>BRAKE FAILURE OR DEFECTIVE</td>\n",
       "      <td>2ND ST &amp; WALNUT</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53941</th>\n",
       "      <td>900099922</td>\n",
       "      <td>2003</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>700.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>No injury/unknown</td>\n",
       "      <td>UNSAFE BACKING</td>\n",
       "      <td>NINETH &amp; NORTH</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53942</th>\n",
       "      <td>900109291</td>\n",
       "      <td>2003</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>Weekend</td>\n",
       "      <td>1700.0</td>\n",
       "      <td>2-Car</td>\n",
       "      <td>Non-incapacitating</td>\n",
       "      <td>OTHER (DRIVER) - EXPLAIN IN NARRATIVE</td>\n",
       "      <td>MONROW &amp; THIRD ST</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>53943 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Master Record Number  Year  Month  Day  DayType    Hour Collision Type  \\\n",
       "0                 902363382  2015      1    5  Weekday     0.0          2-Car   \n",
       "1                 902364268  2015      1    6  Weekday  1500.0          2-Car   \n",
       "2                 902364412  2015      1    6  Weekend  2300.0          2-Car   \n",
       "3                 902364551  2015      1    7  Weekend   900.0          2-Car   \n",
       "4                 902364615  2015      1    7  Weekend  1100.0          2-Car   \n",
       "...                     ...   ...    ...  ...      ...     ...            ...   \n",
       "53938             900084526  2003     10    6  Weekday  1700.0          2-Car   \n",
       "53939             900089213  2003     11    3  Weekday   800.0          1-Car   \n",
       "53940             900095322  2003     12    5  Weekday  1200.0          2-Car   \n",
       "53941             900099922  2003     12    1  Weekend   700.0          2-Car   \n",
       "53942             900109291  2003     12    7  Weekend  1700.0          2-Car   \n",
       "\n",
       "              Injury Type                         Primary Factor  \\\n",
       "0       No injury/unknown  OTHER (DRIVER) - EXPLAIN IN NARRATIVE   \n",
       "1       No injury/unknown                  FOLLOWING TOO CLOSELY   \n",
       "2      Non-incapacitating              DISREGARD SIGNAL/REG SIGN   \n",
       "3      Non-incapacitating          FAILURE TO YIELD RIGHT OF WAY   \n",
       "4       No injury/unknown          FAILURE TO YIELD RIGHT OF WAY   \n",
       "...                   ...                                    ...   \n",
       "53938   No injury/unknown                    IMPROPER LANE USAGE   \n",
       "53939   No injury/unknown                           UNSAFE SPEED   \n",
       "53940   No injury/unknown             BRAKE FAILURE OR DEFECTIVE   \n",
       "53941   No injury/unknown                         UNSAFE BACKING   \n",
       "53942  Non-incapacitating  OTHER (DRIVER) - EXPLAIN IN NARRATIVE   \n",
       "\n",
       "           Reported_Location   Latitude  Longitude  \n",
       "0                 1ST & FESS  39.159207 -86.525874  \n",
       "1              2ND & COLLEGE  39.161440 -86.534848  \n",
       "2      BASSWOOD & BLOOMFIELD  39.149780 -86.568890  \n",
       "3             GATES & JACOBS  39.165655 -86.575956  \n",
       "4                      W 3RD  39.164848 -86.579625  \n",
       "...                      ...        ...        ...  \n",
       "53938  DUNN & WHITE LOT WEST   0.000000   0.000000  \n",
       "53939        RED OAK & SR446   0.000000   0.000000  \n",
       "53940        2ND ST & WALNUT   0.000000   0.000000  \n",
       "53941         NINETH & NORTH   0.000000   0.000000  \n",
       "53942      MONROW & THIRD ST   0.000000   0.000000  \n",
       "\n",
       "[53943 rows x 12 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.fillna(value=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Master Record Number</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.000000e+03</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>3000.000000</td>\n",
       "      <td>2971.000000</td>\n",
       "      <td>2971.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9.024462e+08</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>4.902667</td>\n",
       "      <td>4.246667</td>\n",
       "      <td>1337.600000</td>\n",
       "      <td>35.249089</td>\n",
       "      <td>-77.887751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.637601e+04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.595144</td>\n",
       "      <td>1.890771</td>\n",
       "      <td>521.680257</td>\n",
       "      <td>11.749632</td>\n",
       "      <td>25.962157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>9.023634e+08</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-87.635098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>9.024077e+08</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>39.136448</td>\n",
       "      <td>-86.554901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9.024421e+08</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1400.000000</td>\n",
       "      <td>39.164271</td>\n",
       "      <td>-86.531370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.024875e+08</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1700.000000</td>\n",
       "      <td>39.173344</td>\n",
       "      <td>-86.506992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.025361e+08</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2300.000000</td>\n",
       "      <td>40.175924</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Master Record Number    Year        Month          Day         Hour  \\\n",
       "count          3.000000e+03  3000.0  3000.000000  3000.000000  3000.000000   \n",
       "mean           9.024462e+08  2015.0     4.902667     4.246667  1337.600000   \n",
       "std            4.637601e+04     0.0     2.595144     1.890771   521.680257   \n",
       "min            9.023634e+08  2015.0     1.000000     1.000000     0.000000   \n",
       "25%            9.024077e+08  2015.0     3.000000     3.000000  1000.000000   \n",
       "50%            9.024421e+08  2015.0     5.000000     4.000000  1400.000000   \n",
       "75%            9.024875e+08  2015.0     7.000000     6.000000  1700.000000   \n",
       "max            9.025361e+08  2015.0    10.000000     7.000000  2300.000000   \n",
       "\n",
       "          Latitude    Longitude  \n",
       "count  2971.000000  2971.000000  \n",
       "mean     35.249089   -77.887751  \n",
       "std      11.749632    25.962157  \n",
       "min       0.000000   -87.635098  \n",
       "25%      39.136448   -86.554901  \n",
       "50%      39.164271   -86.531370  \n",
       "75%      39.173344   -86.506992  \n",
       "max      40.175924     0.000000  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[0:3000]\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Master Record Number  Year  Month  Day  DayType    Hour Collision Type  \\\n",
      "0                902363382  2015      1    5        1     0.0          2-Car   \n",
      "1                902364268  2015      1    6        1  1500.0          2-Car   \n",
      "2                902364412  2015      1    6        0  2300.0          2-Car   \n",
      "3                902364551  2015      1    7        0   900.0          2-Car   \n",
      "4                902364615  2015      1    7        0  1100.0          2-Car   \n",
      "...                    ...   ...    ...  ...      ...     ...            ...   \n",
      "2995             902523132  2015      9    3        1  1700.0          1-Car   \n",
      "2996             902523253  2015      9    3        1  2100.0          1-Car   \n",
      "2997             902523342  2015      9    6        1  1100.0          2-Car   \n",
      "2998             902523376  2015      9    5        1  1500.0          1-Car   \n",
      "2999             902523451  2015      9    6        1  1200.0          2-Car   \n",
      "\n",
      "             Injury Type                         Primary Factor  \\\n",
      "0      No injury/unknown  OTHER (DRIVER) - EXPLAIN IN NARRATIVE   \n",
      "1      No injury/unknown                  FOLLOWING TOO CLOSELY   \n",
      "2     Non-incapacitating              DISREGARD SIGNAL/REG SIGN   \n",
      "3     Non-incapacitating          FAILURE TO YIELD RIGHT OF WAY   \n",
      "4      No injury/unknown          FAILURE TO YIELD RIGHT OF WAY   \n",
      "...                  ...                                    ...   \n",
      "2995   No injury/unknown             BRAKE FAILURE OR DEFECTIVE   \n",
      "2996   No injury/unknown                     RAN OFF ROAD RIGHT   \n",
      "2997   No injury/unknown                  FOLLOWING TOO CLOSELY   \n",
      "2998   No injury/unknown  OTHER (DRIVER) - EXPLAIN IN NARRATIVE   \n",
      "2999   No injury/unknown                  FOLLOWING TOO CLOSELY   \n",
      "\n",
      "                                  Reported_Location   Latitude  Longitude  \n",
      "0                                        1ST & FESS  39.159207 -86.525874  \n",
      "1                                     2ND & COLLEGE  39.161440 -86.534848  \n",
      "2                             BASSWOOD & BLOOMFIELD  39.149780 -86.568890  \n",
      "3                                    GATES & JACOBS  39.165655 -86.575956  \n",
      "4                                             W 3RD  39.164848 -86.579625  \n",
      "...                                             ...        ...        ...  \n",
      "2995  SHEILDS RIDGE RD & SHIELDS RIDGE AND HANDY RD   0.000000   0.000000  \n",
      "2996                         BREEDEN & TOM PHILLIPS  39.072084 -86.673449  \n",
      "2997                       N KINSER & W WINDING WAY  39.198144 -86.542096  \n",
      "2998                         PARK SQUARE & WOODSIDE  39.159030 -86.591777  \n",
      "2999                                          THIRD  39.164752 -86.573104  \n",
      "\n",
      "[3000 rows x 12 columns]\n"
     ]
    }
   ],
   "source": [
    "df.DayType.replace(['Weekday', 'Weekend'], [1, 0], inplace=True)\n",
    "print (df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "x = df.Day[:, np.newaxis] # this is the independent Variable\n",
    "y = df.DayType            # this is the dependent Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now we create the linear regression object\n",
    "lr = lm.LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Train the model using Train sets\n",
    "# chekinf for the NAN and Inf values so we set it to the mean to avoid errors\n",
    "\n",
    "lr.fit(x, y)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Day')"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# plotting fitted line\n",
    "plt.scatter(x, y, color='black')\n",
    "plt.plot(x, lr.predict(x), color='blue', linewidth=4)\n",
    "plt.title('Days vs DayType')\n",
    "plt.ylabel('DayType')\n",
    "plt.xlabel('Day')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add predict value to the data frame\n",
    "df['DayType_Pred'] = lr.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from math import sqrt\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R Squared :  1.0\n",
      "Mean Absolute Error:  0.0\n",
      "Root Mean Squared Error:  0.0\n"
     ]
    }
   ],
   "source": [
    "#Using built-in function\n",
    "print (\"R Squared : \", r2_score(df.DayType, df.DayType_Pred))\n",
    "print (\"Mean Absolute Error: \", mean_absolute_error(df.DayType, df.DayType_Pred))\n",
    "print (\"Root Mean Squared Error: \", np.sqrt(mean_squared_error(df.DayType, df.DayType_Pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1dd1a8a50c8>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot sigmoid function\n",
    "x = np.linspace(-10, 10, 100)\n",
    "y = 1.0 / (1.0 + np.exp(-x))\n",
    "plt.plot(x, y, 'r-', label='logit')\n",
    "plt.legend(loc='lower right')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "#lets run logistics regression \n",
    "from sklearn.linear_model import LogisticRegression\n",
    "# manually add intercept\n",
    "df['intercept'] = 1\n",
    "independent_variables = ['DayType', 'intercept']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df[independent_variables] # independent variable\n",
    "y = df['Day'] # dependent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "# instantiate a logistic regression model, and fit with X and y\n",
    "model = LogisticRegression()\n",
    "model = model.fit(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6 6 6 ... 6 6 6]\n",
      "[0.02587027 0.00823523 0.00823523 ... 0.00823523 0.02587027 0.00823523]\n",
      "Predicted probability: [0.06247713 0.02446285 0.02446285 ... 0.02446285 0.06247713 0.02446285]\n",
      "Predicted Class: [6 6 6 ... 6 6 6]\n"
     ]
    }
   ],
   "source": [
    "# check the accuracy on the training set\n",
    "model.score(x, y)\n",
    "print (model.predict(x))\n",
    "print (model.predict_proba(x)[:,0])\n",
    "print ('Predicted probability:', model.predict_proba(x)[:,1])\n",
    "print ('Predicted Class:',model.predict(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting fitted line\n",
    "plt.scatter(df.Day, y, color='black')\n",
    "plt.yticks([0.0, 0.5, 1.0])\n",
    "plt.plot(df.Day, model.predict_proba(x)[:,1], color='blue',\n",
    "linewidth=3)\n",
    "plt.title('Day vs DayType')\n",
    "plt.ylabel('DayType')\n",
    "plt.xlabel('Days')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy : 0.747\n",
      "Confusion matrix : [[  0 280   0   0   0   0   0]\n",
      " [  0 402   0   0   0   0   0]\n",
      " [  0   0 421   0   0   0   0]\n",
      " [  0   0   0 459   0   0   0]\n",
      " [  0   0   0   0   0 479   0]\n",
      " [  0   0   0   0   0 551   0]\n",
      " [  0   0   0   0   0   0 408]]\n",
      "classification report :               precision    recall  f1-score   support\n",
      "\n",
      "           1       0.00      0.00      0.00       280\n",
      "           2       0.59      1.00      0.74       402\n",
      "           3       1.00      1.00      1.00       421\n",
      "           4       1.00      1.00      1.00       459\n",
      "           5       0.00      0.00      0.00       479\n",
      "           6       0.53      1.00      0.70       551\n",
      "           7       1.00      1.00      1.00       408\n",
      "\n",
      "    accuracy                           0.75      3000\n",
      "   macro avg       0.59      0.71      0.63      3000\n",
      "weighted avg       0.61      0.75      0.66      3000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics , svm\n",
    "from sklearn import preprocessing\n",
    "from sklearn import utils\n",
    "from sklearn.svm  import SVC\n",
    "# generate evaluation metrics\n",
    "print (\"Accuracy :\", metrics.accuracy_score(y, model.predict(x)))\n",
    "\n",
    "print (\"Confusion matrix :\",metrics.confusion_matrix(y, model.predict(x)))\n",
    "print (\"classification report :\", metrics.classification_report(y, model.predict(x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
